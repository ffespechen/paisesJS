{"version":3,"sources":["components/Titulo.js","components/Pistas.js","components/Bandera.js","components/TableroJuego.js","App.js","serviceWorker.js","index.js"],"names":["Titulo","Typography","variant","gutterBottom","Component","Pistas","Card","CardContent","this","props","capital","poblacion","subregion","CardMedia","component","image","bandera","TableroJuego","elegirPais","continente","document","getElementById","innerText","subSeleccion","Array","indice","state","paises","region","push","indiceRandom","Math","floor","random","length","nuevoEstado","pais","name","flag","population","setState","adivinar","console","log","value","toUpperCase","fetch","then","response","json","catch","error","Grid","container","spacing","item","xs","Button","id","size","onClick","TextField","label","color","Bandera","String","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0b624131.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\n\nclass Titulo extends Component{\n\n\trender(){\n\t\treturn(\n\t\t\t<div>\n\t\t\t<Typography variant=\"h3\" gutterBottom>\n\t\t\tAdivinar el País [en inglés]\n\t\t\t</Typography>\n\t\t\t</div>\n\t)};\n\n};\n\nexport default Titulo;","import React, {Component} from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\n\n\nclass Pistas extends Component{\n\nrender(){\n\treturn(\n\t\t<Card>\n\t\t\t<CardContent>\n\t\t\t\t<h3>Pistas</h3>\n\t\t\t\t<h4>La Capital del país es {this.props.capital}</h4>\n\t\t\t\t<h4>La Población es de {this.props.poblacion} habitantes</h4>\n\t\t\t\t<h4>Dentro de su continente, está en la subregión {this.props.subregion}</h4>\n\t\t\t</CardContent>\n\t\t</Card>\n\n\t\t)\n\n};\n\n\n};\n\nexport default Pistas;\n","import React, {Component} from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\n\n\nclass Pistas extends Component{\n\nrender(){\n\treturn(\n\t\t<Card>\n\t\t\t<CardMedia\n\t\t\tcomponent=\"img\"\n\t\t\timage={this.props.bandera} />\n\t\t</Card>\n\n\t\t)\n\n};\n\n\n};\n\nexport default Pistas;\n","import React, { Component } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/Button\";\nimport SendOutlinedIcon from \"@material-ui/icons/SendOutlined\";\n\nimport Pistas from \"./Pistas\";\nimport Bandera from \"./Bandera\";\n\nclass TableroJuego extends Component{\n\n\tconstructor(){\n\t\tsuper();\n\n\t\tthis.state = {\n\t\t\tpaises : null,\n\t\t\tpais : null,\n\t\t\tbandera : null,\n\t\t\tcapital : null,\n\t\t\tsubregion : null,\n\t\t\tpoblacion : null,\n\n\t\t};\n\t};\n\n\n\tcomponentDidMount(){\n\n\t\tfetch(\"https://restcountries.eu/rest/v2/all\")\n\t\t.then(response => response.json())\n\t\t.then(paises => this.setState({paises : paises}))\n\t\t.catch( error => console.log(error));\n\n\t};\n\n\telegirPais = (continente) => {\n\n\t\tdocument.getElementById(\"continenteElegido\").innerText = \"El país a adivinar está en... \" + continente;\n\n\t\tvar subSeleccion = new Array();\n\n\t\tfor(var indice in this.state.paises){\n\t\t\tif(this.state.paises[indice].region===continente){\n\t\t\t\tsubSeleccion.push(this.state.paises[indice]);\n\t\t\t}\n\t\t}\n\n\t\t\n\t\tvar indiceRandom = Math.floor(Math.random()*subSeleccion.length);\n\n\t\tvar nuevoEstado = { pais : subSeleccion[indiceRandom].name,\n\t\t\t\t\t\tbandera : subSeleccion[indiceRandom].flag,\n\t\t\t\t\t\tcapital : subSeleccion[indiceRandom].capital,\n\t\t\t\t\t\tsubregion : subSeleccion[indiceRandom].subregion,\n\t\t\t\t\t\tpoblacion : subSeleccion[indiceRandom].population,\n\t\t\t\t\t};\n\n\t\tthis.setState(nuevoEstado);\n\n\t};\n\n\n\tadivinar = () => {\n\t\tconsole.log(this.state.pais + \" capital \" + this.state.capital);\n\n\t\tif(document.getElementById(\"paisUsuario\").value.toUpperCase()==this.state.pais.toUpperCase()){\n\t\t\tconsole.log(\"GANADOR\");\n\t\t}\n\t\t\n\t};\n\n\trender(){\n\t\treturn(\n\t\t\t<Grid container spacing={2}>\n\t\t\t\t<Grid item xs={2}>\n\t\t\t\t\t<Button \n\t\t\t\t\tid=\"Asia\"\n\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\tsize=\"medium\"\n\t\t\t\t\tonClick={() => this.elegirPais(\"Asia\")}>\n\t\t\t\t\tAsia\n\t\t\t\t\t</Button>\n\t\t\t\t</Grid>\n\n\t\t\t\t<Grid item xs={2}>\n\t\t\t\t\t<Button \n\t\t\t\t\tid=\"Europe\"\n\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\tsize=\"medium\"\n\t\t\t\t\tonClick={() => this.elegirPais(\"Europe\")}>\n\t\t\t\t\tEurope\n\t\t\t\t\t</Button>\n\t\t\t\t</Grid>\n\n\t\t\t\t<Grid item xs={2}>\n\t\t\t\t\t<Button \n\t\t\t\t\tid=\"America\"\n\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\tsize=\"medium\"\n\t\t\t\t\tonClick={() => this.elegirPais(\"Americas\")}>\n\t\t\t\t\tAmerica\n\t\t\t\t\t</Button>\n\t\t\t\t</Grid>\n\n\t\t\t\t<Grid item xs={2}>\n\t\t\t\t\t<Button \n\t\t\t\t\tid=\"Africa\"\n\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\tsize=\"medium\"\n\t\t\t\t\tonClick={() => this.elegirPais(\"Africa\")}>\n\t\t\t\t\tAfrica\n\t\t\t\t\t</Button>\n\t\t\t\t</Grid>\n\n\t\t\t\t<Grid item xs={2}>\n\t\t\t\t\t<Button \n\t\t\t\t\tid=\"Oceania\"\n\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\tsize=\"medium\"\n\t\t\t\t\tonClick={() => this.elegirPais(\"Oceania\")}>\n\t\t\t\t\tOceania\n\t\t\t\t\t</Button>\n\t\t\t\t</Grid>\n\n\t\t        <Grid item xs={12}>\n\t\t        \t<div>\n\t\t\t\t\t\t<TextField \n\t\t\t\t\t\tid=\"paisUsuario\"\n\t\t\t\t\t\tlabel=\"¿De qué país se trata?\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tsize=\"small\" />\n\t\t\t\t\t\t\n\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tsize=\"large\"\n\t\t\t\t\t\tonClick={this.adivinar}>\n\t\t\t\t\t\t<SendOutlinedIcon />\n\t\t\t\t\t\t</IconButton>\n\n\t\t\t\t\t</div>\n\t\t        </Grid>\n\t\t      \t\n\t\t      \t<Grid item xs={12}>\n\t\t      \t\t<div id=\"continenteElegido\"></div>\n\t\t      \t</Grid>\n\n\t\t      \t<Grid item xs={6}>\n\n\t\t      \t<Bandera \n\t\t      \tbandera={this.state.bandera} />\t\t      \t\t\n\t\t      \t</Grid>\t\t       \t\n\n\t\t      \t<Grid item xs={6}>\n\n\t\t      \t<Pistas \n\t\t      \tcapital={this.state.capital}\n\t\t      \tpoblacion={String(this.state.poblacion)}\n\t\t      \tsubregion={this.state.subregion} />\n\t\t      \t\t\n\t\t      \t</Grid>\n\n\t\t      </Grid>\t\t\t\n\t\t\t)};\n\n  };\n\n  export default TableroJuego;","import React, {Component} from 'react';\nimport './App.css';\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\n\nimport Titulo from \"./components/Titulo\";\nimport TableroJuego from \"./components/TableroJuego\";\n\nclass App extends Component {\n\n\n\n  render(){\n  return (\n    <div className=\"App\">\n      <header>\n\n      <Grid container spacing={4}>\n      \t<Grid item xs={12}>\n      \t\t<Titulo />\n      \t</Grid>\n      </Grid>\n\n      <div id=\"tablero\">\n        <TableroJuego />\n      </div>\n\n      </header>\n    </div>\n  )};\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}